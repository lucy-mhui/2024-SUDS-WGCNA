---
title: "3 Relating consensus module to MDD"
output: html_document
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

# MDD vs Control

## 0 setup

```{r}
library(WGCNA)
options(stringsAsFactors = FALSE)
lnames = load(file = "/Users/lucyhui/Downloads/SUDS/Consensus/1 Data input/Consensus-dataInput.RData")
lnames
lnames = load(file = "/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-networkConstruction-auto.RData")
lnames
```

## MDD to Consensus
Load variables 

```{r}
# load the MDD data and rename so they do not conflict with consensus data
lnames = load("/Users/lucyhui/Downloads/SUDS/Individual/2 module detection/02-MDD-networkConstruction.RData")
lnames

# rename variables to avoid conflicts
MDDLabels = moduleLabels
MDDColors = moduleColors
MDDTree = geneTree
MDDMEs = orderMEs(MEs, greyName = "ME0")

# load results of consensus module identification
lnames = load("/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-networkConstruction-auto.RData")
lnames
```

Calculate the overlaps of each pair of MDD-consensus modules
Use the Fisher’s exact test to assign a p-value to each of the pairwise overlaps

```{r}
# isolate module labels in order they appear in ordered module eigengenes
MDDModuleLabels = substring(names(MDDMEs),3)
consModuleLabels = substring(names(consMEs[[1]]$data), 3)

# convert numeric module labels to color labels
MDDModules = MDDModuleLabels
consModules = labels2colors(as.numeric(consModuleLabels))

# numbers of MDD and consensus modules
nMDDMods=length(MDDModules)
nConsMods = length(consModules)

# initialize table of p values and of corresponding counts
pTable = matrix(0, nrow = nMDDMods, ncol=nConsMods)
CountTbl = matrix(0, nrow = nMDDMods, ncol = nConsMods)

# execute all pairwise comparisons
for (fmod in 1:nMDDMods)
  for (cmod in 1:nConsMods)
  {
    MDDMembers = (MDDColors == MDDModules[fmod])
    consMembers = (moduleColors == consModules[cmod])
    pTable[fmod, cmod] = -log10(fisher.test(MDDMembers, consMembers, alternative = "greater")$p.value)
    CountTbl[fmod, cmod] = sum(MDDColors == MDDModules[fmod] & moduleColors == consModules[cmod])
  }
```

Visualize

```{r}
# truncate p values smaller than 10^-50
pTable[is.infinite(pTable)] = 1.3*max(pTable[is.finite(pTable)])
pTable[pTable > 50] = 50

# marginal counts (really module sizes)
MDDModTotals = apply(CountTbl, 1, sum)
consModTotals = apply(CountTbl, 2, sum)

# actual plotting
sizeGrWindow(10,1)
par(cex = 1)
par(mar = c(6, 8, 4, 2) + 0.1)
par(oma = c(2, 2, 2, 2))
labeledHeatmap(Matrix = pTable,
               xLabels = paste("", consModules),
               yLabels = paste("", MDDModules),
               colorLabels = FALSE,
               xSymbols = paste("Cons ", consModules, ": ", consModTotals, sep=""),
               ySymbols = paste("MDD ", MDDModules, ": ", MDDModTotals, sep=""),
               textMatrix=CountTbl,
               colors = greenWhiteRed(100)[50:100],
               main = "Correspondance of MDD set-specific and MDD-Control consensus modules",
               cex.text = 1, cex.lab = 0.8, cex.main = 0.9, set.StdMargins = FALSE)
```



## Control to Consensus

Load variables 

```{r}
# load the MDD data and rename so they do not conflict with consensus data
lnames = load("/Users/lucyhui/Downloads/SUDS/Individual/2 module detection/02-Control-networkConstruction.RData")
lnames

# rename variables to avoid conflicts
MDDLabels = moduleLabels
MDDColors = moduleColors
MDDTree = geneTree
MDDMEs = orderMEs(MEs, greyName = "ME0")

# load results of consensus module identification
lnames = load("/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-networkConstruction-auto.RData")
lnames
```

Calculate the overlaps of each pair of MDD-consensus modules
Use the Fisher’s exact test to assign a p-value to each of the pairwise overlaps

```{r}
# isolate module labels in order they appear in ordered module eigengenes
MDDModuleLabels = substring(names(MDDMEs),3)
consModuleLabels = substring(names(consMEs[[1]]$data), 3)

# convert numeric module labels to color labels
MDDModules = MDDModuleLabels
consModules = labels2colors(as.numeric(consModuleLabels))

# numbers of MDD and consensus modules
nMDDMods=length(MDDModules)
nConsMods = length(consModules)

# initialize table of p values and of corresponding counts
pTable = matrix(0, nrow = nMDDMods, ncol=nConsMods)
CountTbl = matrix(0, nrow = nMDDMods, ncol = nConsMods)

# execute all pairwise comparisons
for (fmod in 1:nMDDMods)
  for (cmod in 1:nConsMods)
  {
    MDDMembers = (MDDColors == MDDModules[fmod])
    consMembers = (moduleColors == consModules[cmod])
    pTable[fmod, cmod] = -log10(fisher.test(MDDMembers, consMembers, alternative = "greater")$p.value)
    CountTbl[fmod, cmod] = sum(MDDColors == MDDModules[fmod] & moduleColors == consModules[cmod])
  }
```

Visualize

```{r}
# truncate p values smaller than 10^-50
pTable[is.infinite(pTable)] = 1.3*max(pTable[is.finite(pTable)])
pTable[pTable > 50] = 50

# marginal counts (really module sizes)
MDDModTotals = apply(CountTbl, 1, sum)
consModTotals = apply(CountTbl, 2, sum)

# actual plotting
sizeGrWindow(10,1)
par(cex = 1)
par(mar = c(6, 8, 4, 2) + 0.1)
par(oma = c(2, 2, 2, 2))
labeledHeatmap(Matrix = pTable,
               xLabels = paste("", consModules),
               yLabels = paste("", MDDModules),
               colorLabels = FALSE,
               xSymbols = paste("Cons ", consModules, ": ", consModTotals, sep=""),
               ySymbols = paste("MDD ", MDDModules, ": ", MDDModTotals, sep=""),
               textMatrix=CountTbl,
               colors = greenWhiteRed(100)[50:100],
               main = "Correspondance of Control set-specific and MDD-Control consensus modules",
               cex.text = 1, cex.lab = 0.8, cex.main = 0.9, set.StdMargins = FALSE)
```




# MDD M vs F

## 0 setup

```{r}
library(WGCNA)
options(stringsAsFactors = FALSE)
lnames = load(file = "/Users/lucyhui/Downloads/SUDS/Consensus/1 Data input/Consensus-MDDMFdataInput.RData")
lnames
lnames = load(file = "/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-MDDMF-networkConstruction-auto.RData")
lnames
```

## MDD M to Consensus 

Load variables 

```{r}
# load the MDD data and rename so they do not conflict with consensus data
lnames = load("/Users/lucyhui/Downloads/SUDS/Individual/2 module detection/02-MDDinfM-networkConstruction.RData")
lnames

# rename variables to avoid conflicts
MDDLabels = moduleLabels
MDDColors = moduleColors
MDDTree = geneTree
MDDMEs = orderMEs(MEs, greyName = "ME0")

# load results of consensus module identification
lnames = load("/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-MDDMF-networkConstruction-auto.RData")
lnames
```

Calculate the overlaps of each pair of MDD-consensus modules
Use the Fisher’s exact test to assign a p-value to each of the pairwise overlaps

```{r}
# isolate module labels in order they appear in ordered module eigengenes
MDDModuleLabels = substring(names(MDDMEs),3)
consModuleLabels = substring(names(consMEs[[1]]$data), 3)

# convert numeric module labels to color labels
MDDModules = MDDModuleLabels
consModules = labels2colors(as.numeric(consModuleLabels))

# numbers of MDD and consensus modules
nMDDMods=length(MDDModules)
nConsMods = length(consModules)

# initialize table of p values and of corresponding counts
pTable = matrix(0, nrow = nMDDMods, ncol=nConsMods)
CountTbl = matrix(0, nrow = nMDDMods, ncol = nConsMods)

# execute all pairwise comparisons
for (fmod in 1:nMDDMods)
  for (cmod in 1:nConsMods)
  {
    MDDMembers = (MDDColors == MDDModules[fmod])
    consMembers = (moduleColors == consModules[cmod])
    pTable[fmod, cmod] = -log10(fisher.test(MDDMembers, consMembers, alternative = "greater")$p.value)
    CountTbl[fmod, cmod] = sum(MDDColors == MDDModules[fmod] & moduleColors == consModules[cmod])
  }
```

Visualize

```{r}
# truncate p values smaller than 10^-50
pTable[is.infinite(pTable)] = 1.3*max(pTable[is.finite(pTable)])
pTable[pTable > 50] = 50

# marginal counts (really module sizes)
MDDModTotals = apply(CountTbl, 1, sum)
consModTotals = apply(CountTbl, 2, sum)

# actual plotting
sizeGrWindow(10,1)
par(cex = 1)
par(mar = c(6, 8, 4, 2) + 0.1)
par(oma = c(2, 2, 2, 2))
labeledHeatmap(Matrix = pTable,
               xLabels = paste("", consModules),
               yLabels = paste("", MDDModules),
               colorLabels = FALSE,
               xSymbols = paste("Cons ", consModules, ": ", consModTotals, sep=""),
               ySymbols = paste("MDD ", MDDModules, ": ", MDDModTotals, sep=""),
               textMatrix=CountTbl,
               colors = greenWhiteRed(100)[50:100],
               main = "Correspondance of MDD M set-specific and MDD M-F consensus modules",
               cex.text = 1, cex.lab = 0.8, cex.main = 0.9, set.StdMargins = FALSE)
```



## MDD F to Consensus

Load variables 

```{r}
# load the MDD data and rename so they do not conflict with consensus data
lnames = load("/Users/lucyhui/Downloads/SUDS/Individual/2 module detection/02-MDDinfF-networkConstruction.RData")
lnames

# rename variables to avoid conflicts
MDDLabels = moduleLabels
MDDColors = moduleColors
MDDTree = geneTree
MDDMEs = orderMEs(MEs, greyName = "ME0")

# load results of consensus module identification
lnames = load("/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-MDDMF-networkConstruction-auto.RData")
lnames
```

Calculate the overlaps of each pair of MDD-consensus modules
Use the Fisher’s exact test to assign a p-value to each of the pairwise overlaps

```{r}
# isolate module labels in order they appear in ordered module eigengenes
MDDModuleLabels = substring(names(MDDMEs),3)
consModuleLabels = substring(names(consMEs[[1]]$data), 3)

# convert numeric module labels to color labels
MDDModules = MDDModuleLabels
consModules = labels2colors(as.numeric(consModuleLabels))

# numbers of MDD and consensus modules
nMDDMods=length(MDDModules)
nConsMods = length(consModules)

# initialize table of p values and of corresponding counts
pTable = matrix(0, nrow = nMDDMods, ncol=nConsMods)
CountTbl = matrix(0, nrow = nMDDMods, ncol = nConsMods)

# execute all pairwise comparisons
for (fmod in 1:nMDDMods)
  for (cmod in 1:nConsMods)
  {
    MDDMembers = (MDDColors == MDDModules[fmod])
    consMembers = (moduleColors == consModules[cmod])
    pTable[fmod, cmod] = -log10(fisher.test(MDDMembers, consMembers, alternative = "greater")$p.value)
    CountTbl[fmod, cmod] = sum(MDDColors == MDDModules[fmod] & moduleColors == consModules[cmod])
  }
```

Visualize

```{r}
# truncate p values smaller than 10^-50
pTable[is.infinite(pTable)] = 1.3*max(pTable[is.finite(pTable)])
pTable[pTable > 50] = 50

# marginal counts (really module sizes)
MDDModTotals = apply(CountTbl, 1, sum)
consModTotals = apply(CountTbl, 2, sum)

# actual plotting
sizeGrWindow(10,1)
par(cex = 1)
par(mar = c(6, 8, 4, 2) + 0.1)
par(oma = c(2, 2, 2, 2))
labeledHeatmap(Matrix = pTable,
               xLabels = paste("", consModules),
               yLabels = paste("", MDDModules),
               colorLabels = FALSE,
               xSymbols = paste("Cons ", consModules, ": ", consModTotals, sep=""),
               ySymbols = paste("MDD ", MDDModules, ": ", MDDModTotals, sep=""),
               textMatrix=CountTbl,
               colors = greenWhiteRed(100)[50:100],
               main = "Correspondance of MDD F set-specific and MDD M-F consensus modules",
               cex.text = 1, cex.lab = 0.8, cex.main = 0.9, set.StdMargins = FALSE)
```


# Control M vs F 

## 0 setup

```{r}
library(WGCNA)
options(stringsAsFactors = FALSE)
lnames = load(file = "/Users/lucyhui/Downloads/SUDS/Consensus/1 Data input/Consensus-MDDMFdataInput.RData")
lnames
lnames = load(file = "/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-MDDMF-networkConstruction-auto.RData")
lnames
```

## Control M to Consensus 

Load variables 

```{r}
# load the MDD data and rename so they do not conflict with consensus data
lnames = load("/Users/lucyhui/Downloads/SUDS/Individual/2 module detection/02-CntrlInfM-networkConstruction.RData")
lnames

# rename variables to avoid conflicts
MDDLabels = moduleLabels
MDDColors = moduleColors
MDDTree = geneTree
MDDMEs = orderMEs(MEs, greyName = "ME0")

# load results of consensus module identification
lnames = load("/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-MDDMF-networkConstruction-auto.RData")
lnames
```

Calculate the overlaps of each pair of MDD-consensus modules
Use the Fisher’s exact test to assign a p-value to each of the pairwise overlaps

```{r}
# isolate module labels in order they appear in ordered module eigengenes
MDDModuleLabels = substring(names(MDDMEs),3)
consModuleLabels = substring(names(consMEs[[1]]$data), 3)

# convert numeric module labels to color labels
MDDModules = MDDModuleLabels
consModules = labels2colors(as.numeric(consModuleLabels))

# numbers of MDD and consensus modules
nMDDMods=length(MDDModules)
nConsMods = length(consModules)

# initialize table of p values and of corresponding counts
pTable = matrix(0, nrow = nMDDMods, ncol=nConsMods)
CountTbl = matrix(0, nrow = nMDDMods, ncol = nConsMods)

# execute all pairwise comparisons
for (fmod in 1:nMDDMods)
  for (cmod in 1:nConsMods)
  {
    MDDMembers = (MDDColors == MDDModules[fmod])
    consMembers = (moduleColors == consModules[cmod])
    pTable[fmod, cmod] = -log10(fisher.test(MDDMembers, consMembers, alternative = "greater")$p.value)
    CountTbl[fmod, cmod] = sum(MDDColors == MDDModules[fmod] & moduleColors == consModules[cmod])
  }
```

Visualize

```{r}
# truncate p values smaller than 10^-50
pTable[is.infinite(pTable)] = 1.3*max(pTable[is.finite(pTable)])
pTable[pTable > 50] = 50

# marginal counts (really module sizes)
MDDModTotals = apply(CountTbl, 1, sum)
consModTotals = apply(CountTbl, 2, sum)

# actual plotting
sizeGrWindow(10,1)
par(cex = 1)
par(mar = c(6, 8, 4, 2) + 0.1)
par(oma = c(2, 2, 2, 2))
labeledHeatmap(Matrix = pTable,
               xLabels = paste("", consModules),
               yLabels = paste("", MDDModules),
               colorLabels = FALSE,
               xSymbols = paste("Cons ", consModules, ": ", consModTotals, sep=""),
               ySymbols = paste("MDD ", MDDModules, ": ", MDDModTotals, sep=""),
               textMatrix=CountTbl,
               colors = greenWhiteRed(100)[50:100],
               main = "Correspondance of Control M set-specific and M-F consensus modules",
               cex.text = 1, cex.lab = 0.8, cex.main = 0.9, set.StdMargins = FALSE)
```

## Control F to Consensus 

Load variables 

```{r}
# load the MDD data and rename so they do not conflict with consensus data
lnames = load("/Users/lucyhui/Downloads/SUDS/Individual/2 module detection/02-CntrlInfF-networkConstruction.RData")
lnames

# rename variables to avoid conflicts
MDDLabels = moduleLabels
MDDColors = moduleColors
MDDTree = geneTree
MDDMEs = orderMEs(MEs, greyName = "ME0")

# load results of consensus module identification
lnames = load("/Users/lucyhui/Downloads/SUDS/Consensus/2 Module/Consensus-MDDMF-networkConstruction-auto.RData")
lnames
```

Calculate the overlaps of each pair of MDD-consensus modules
Use the Fisher’s exact test to assign a p-value to each of the pairwise overlaps

```{r}
# isolate module labels in order they appear in ordered module eigengenes
MDDModuleLabels = substring(names(MDDMEs),3)
consModuleLabels = substring(names(consMEs[[1]]$data), 3)

# convert numeric module labels to color labels
MDDModules = MDDModuleLabels
consModules = labels2colors(as.numeric(consModuleLabels))

# numbers of MDD and consensus modules
nMDDMods=length(MDDModules)
nConsMods = length(consModules)

# initialize table of p values and of corresponding counts
pTable = matrix(0, nrow = nMDDMods, ncol=nConsMods)
CountTbl = matrix(0, nrow = nMDDMods, ncol = nConsMods)

# execute all pairwise comparisons
for (fmod in 1:nMDDMods)
  for (cmod in 1:nConsMods)
  {
    MDDMembers = (MDDColors == MDDModules[fmod])
    consMembers = (moduleColors == consModules[cmod])
    pTable[fmod, cmod] = -log10(fisher.test(MDDMembers, consMembers, alternative = "greater")$p.value)
    CountTbl[fmod, cmod] = sum(MDDColors == MDDModules[fmod] & moduleColors == consModules[cmod])
  }
```

Visualize

```{r}
# truncate p values smaller than 10^-50
pTable[is.infinite(pTable)] = 1.3*max(pTable[is.finite(pTable)])
pTable[pTable > 50] = 50

# marginal counts (really module sizes)
MDDModTotals = apply(CountTbl, 1, sum)
consModTotals = apply(CountTbl, 2, sum)

# actual plotting
sizeGrWindow(10,1)
par(cex = 1)
par(mar = c(6, 8, 4, 2) + 0.1)
par(oma = c(2, 2, 2, 2))
labeledHeatmap(Matrix = pTable,
               xLabels = paste("", consModules),
               yLabels = paste("", MDDModules),
               colorLabels = FALSE,
               xSymbols = paste("Cons ", consModules, ": ", consModTotals, sep=""),
               ySymbols = paste("MDD ", MDDModules, ": ", MDDModTotals, sep=""),
               textMatrix=CountTbl,
               colors = greenWhiteRed(100)[50:100],
               main = "Correspondance of Control F set-specific and M-F consensus modules",
               cex.text = 1, cex.lab = 0.8, cex.main = 0.9, set.StdMargins = FALSE)
```
